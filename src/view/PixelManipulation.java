/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JSlider;
import javax.xml.bind.DatatypeConverter;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import pixelmanipulation_refactor.CustomImage;
import pixelmanipulation_refactor.Filters;
import pixelmanipulation_refactor.MyImage;

/**
 *
 * @author LINK5
 */
public class PixelManipulation extends javax.swing.JFrame {

    /**
     * Creates new form PixelManipulation
     */
    public PixelManipulation() {
        initComponents();
        setLocationRelativeTo(null);
        img = new CustomImage();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel_Image1 = new javax.swing.JLabel();
        jButton_SelectImage = new javax.swing.JButton();
        jLabel_Image2 = new javax.swing.JLabel();
        briloo = new javax.swing.JSlider();
        gamma = new javax.swing.JSlider();
        contraste = new javax.swing.JSlider();
        negative = new javax.swing.JRadioButton();
        binarizar = new javax.swing.JRadioButton();
        resetear = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        avering = new javax.swing.JRadioButton();
        gaussian = new javax.swing.JRadioButton();
        media = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel_Image1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel_Image1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(240, 240, 240)));

        jButton_SelectImage.setText("Sleccionar im√°gen");
        jButton_SelectImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SelectImageActionPerformed(evt);
            }
        });

        jLabel_Image2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel_Image2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(240, 240, 240)));
        jLabel_Image2.setOpaque(true);
        jLabel_Image2.setPreferredSize(new java.awt.Dimension(400, 277));

        briloo.setMaximum(10);
        briloo.setMinimum(-10);
        briloo.setMinorTickSpacing(1);
        briloo.setPaintLabels(true);
        briloo.setPaintTicks(true);
        briloo.setSnapToTicks(true);
        briloo.setValue(0);
        briloo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BRILLO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 0, 11))); // NOI18N
        briloo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilooStateChanged(evt);
            }
        });

        gamma.setMaximum(10);
        gamma.setMinorTickSpacing(1);
        gamma.setPaintLabels(true);
        gamma.setPaintTicks(true);
        gamma.setSnapToTicks(true);
        gamma.setValue(0);
        gamma.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GAMMA", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 0, 11))); // NOI18N
        gamma.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gammaStateChanged(evt);
            }
        });

        contraste.setMaximum(10);
        contraste.setMinimum(-10);
        contraste.setMinorTickSpacing(1);
        contraste.setPaintLabels(true);
        contraste.setPaintTicks(true);
        contraste.setSnapToTicks(true);
        contraste.setValue(0);
        contraste.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONTRASTE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 0, 11))); // NOI18N
        contraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrasteStateChanged(evt);
            }
        });

        negative.setFont(new java.awt.Font("Tempus Sans ITC", 0, 11)); // NOI18N
        negative.setText("NEGATIVO");
        negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeActionPerformed(evt);
            }
        });

        binarizar.setFont(new java.awt.Font("Tempus Sans ITC", 0, 11)); // NOI18N
        binarizar.setText("BINARIZA");
        binarizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarizarActionPerformed(evt);
            }
        });

        resetear.setText("RESETEAR");
        resetear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetearActionPerformed(evt);
            }
        });

        guardar.setText("GUARDAR");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        avering.setFont(new java.awt.Font("Tempus Sans ITC", 0, 11)); // NOI18N
        avering.setText("AVERING FILTER");
        avering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averingActionPerformed(evt);
            }
        });

        gaussian.setFont(new java.awt.Font("Tempus Sans ITC", 0, 11)); // NOI18N
        gaussian.setText("GAUSSIAN FILTER");
        gaussian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussianActionPerformed(evt);
            }
        });

        media.setFont(new java.awt.Font("Tempus Sans ITC", 0, 11)); // NOI18N
        media.setText("MEDIA FILTER");
        media.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel_Image1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(briloo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gamma, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contraste, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(guardar)
                            .addComponent(resetear))
                        .addGap(71, 71, 71))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(negative)
                                .addGap(39, 39, 39)
                                .addComponent(avering))
                            .addComponent(jLabel_Image2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(binarizar)
                                .addGap(43, 43, 43)
                                .addComponent(gaussian))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(media)))
                        .addGap(43, 43, 43))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jButton_SelectImage, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_SelectImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Image1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Image2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(briloo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(resetear)
                                .addGap(13, 13, 13)
                                .addComponent(guardar))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gamma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(contraste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(negative)
                            .addComponent(avering, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gaussian, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(binarizar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(media, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String link;
    private void jButton_SelectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SelectImageActionPerformed
        // TODO add your handling code here:
        Image imageToShow;

        String direccion = img.getImage().getPath();
        Mat newImage = Imgcodecs.imread(direccion);
        link = direccion;

        myImage = newImage;

        buffer = img.toBytes(myImage);

        imageToShow = img.toImage(myImage, buffer);

        jLabel_Image1.setIcon(new ImageIcon(imageToShow.getScaledInstance(this.jLabel_Image1.getWidth(), this.jLabel_Image1.getHeight(), Image.SCALE_DEFAULT)));

        brightImage = myImage;


    }//GEN-LAST:event_jButton_SelectImageActionPerformed

    int actual = 0;
    int previo = 0;

    private void brilooStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilooStateChanged
        // TODO add your handling code here:
        Mat imagen = myImage;
        JSlider source = (JSlider) evt.getSource();
        byte[] buffer = img.toBytes(imagen);
        // byte[] bufferTemp =img.toBytes(temporalImage);

        actual = source.getValue();

        if (actual > previo) {
            imagen = Filters.addBrightness(buffer, imagen, actual);
            //System.out.println("El previo es: "+previo+"   y el actual es "+actual);
            previo = actual;

        }
        if (actual < previo) {

            imagen = Filters.lessBrightness(buffer, imagen, actual);
            //System.out.println("El previo es: "+previo+"   y el actual es "+actual);
            previo = actual;

        }
        Image image = img.toImage(imagen, buffer);
        jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));

    }//GEN-LAST:event_brilooStateChanged

    private void gammaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gammaStateChanged
        // TODO add your handling code here:
        Mat imagen = myImage;
        JSlider source = (JSlider) evt.getSource();
        byte[] buffer = img.toBytes(imagen);
        // byte[] buffer = img.toBytes(brightImage);       
        float valor = source.getValue();

        valor = valor / 10;
        imagen = Filters.correccionGamma(imagen, valor);

        Image image = img.toImage(imagen, buffer);
        jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));

    }//GEN-LAST:event_gammaStateChanged
    int previoContraste = 0, actualContraste = 0;

    private void contrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrasteStateChanged
        // TODO add your handling code here:
        Mat imagen = myImage;
        JSlider source = (JSlider) evt.getSource();

        // byte[] bufferTemp =img.toBytes(temporalImage);
        actualContraste = source.getValue();

        /*  if (actualContraste < 0) {
            actualContraste = actualContraste * (-1);
        }*/
        if (actualContraste > previoContraste) {

            imagen = Filters.addcorreccionContraste(imagen, actualContraste);
            previoContraste = actualContraste;

        }
        if (actualContraste < previoContraste) {

            imagen = Filters.lesscorreccionContraste(imagen, actualContraste);
            previoContraste = actualContraste;

        }

        Image image = img.toImage(imagen, buffer);
        jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));

    }//GEN-LAST:event_contrasteStateChanged
    int n = 0;
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        Mat imagen = myImage;
        CustomImage ci = new CustomImage();
        n++;
        ci.guardarImg(imagen, n);
    }//GEN-LAST:event_guardarActionPerformed

    private void resetearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetearActionPerformed

        // TODO add your handling code here:
        Image imageToShow;
        Mat newImage = Imgcodecs.imread(link);

        myImage = newImage;

        buffer = img.toBytes(myImage);

        imageToShow = img.toImage(myImage, buffer);

        jLabel_Image2.setIcon(new ImageIcon(imageToShow.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));

        brightImage = myImage;

        gamma.setValue(0);
        briloo.setValue(0);
        contraste.setValue(0);


    }//GEN-LAST:event_resetearActionPerformed

    private void negativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeActionPerformed
        // TODO add your handling code here:
        Mat imagen = myImage;

        imagen = Filters.negativo(imagen);

        Image image = img.toImage(imagen, buffer);
        jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));

    }//GEN-LAST:event_negativeActionPerformed

    private void binarizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarizarActionPerformed
        // TODO add your handling code here:
        if (binarizar.isSelected()) {
            Mat imagen = myImage;
            imagen = Filters.binarizacion(imagen);
            Image image = img.toImage(imagen, buffer);
            jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));
        } else {
            Image imageToShow;
            Mat newImage = Imgcodecs.imread(link);
            myImage = newImage;
            buffer = img.toBytes(myImage);
            imageToShow = img.toImage(myImage, buffer);
            jLabel_Image2.setIcon(new ImageIcon(imageToShow.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));
            brightImage = myImage;
        }

    }//GEN-LAST:event_binarizarActionPerformed

    private void averingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averingActionPerformed
        // TODO add your handling code here:
        if (avering.isSelected()) {
            Mat imagen = myImage;
            double[] resultado;

            for (int i = 0; i < imagen.rows() - 2; i++) {
                for (int j = 0; j < imagen.cols() - 2; j++) {

                    resultado = Filters.avering(imagen, i, j);

                    imagen.put(i + 1, j + 1, resultado);
                }
            }
            Image image = img.toImage(imagen, buffer);
            jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));
        }

    }//GEN-LAST:event_averingActionPerformed

    private void gaussianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussianActionPerformed
        // TODO add your handling code here:
        if (gaussian.isSelected()) {
            Mat imagen = myImage;
            double[] resultado;
            for (int i = 0; i < imagen.rows() - 2; i++) {
                for (int j = 0; j < imagen.cols() - 2; j++) {

                    resultado = Filters.gaussian(imagen, i, j);
                    imagen.put(i + 1, j + 1, resultado);
                }
            }
            Image image = img.toImage(imagen, buffer);
            jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));
        }
    }//GEN-LAST:event_gaussianActionPerformed

    private void mediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaActionPerformed
        // TODO add your handling code here:
        if (media.isSelected()) {
            Mat imagen = myImage;
            double[] resultado;
            for (int i = 0; i < imagen.rows() - 2; i++) {
                for (int j = 0; j < imagen.cols() - 2; j++) {

                    resultado = Filters.media(imagen, i, j);
                    imagen.put(i + 1, j + 1, resultado);
                }
            }
            Image image = img.toImage(imagen, buffer);
            jLabel_Image2.setIcon(new ImageIcon(image.getScaledInstance(this.jLabel_Image2.getWidth(), this.jLabel_Image2.getHeight(), Image.SCALE_DEFAULT)));
        }
    }//GEN-LAST:event_mediaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PixelManipulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PixelManipulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PixelManipulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PixelManipulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PixelManipulation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton avering;
    private javax.swing.JRadioButton binarizar;
    private javax.swing.JSlider briloo;
    private javax.swing.JSlider contraste;
    private javax.swing.JSlider gamma;
    private javax.swing.JRadioButton gaussian;
    private javax.swing.JButton guardar;
    private javax.swing.JButton jButton_SelectImage;
    private javax.swing.JLabel jLabel_Image1;
    private javax.swing.JLabel jLabel_Image2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton media;
    private javax.swing.JRadioButton negative;
    private javax.swing.JButton resetear;
    // End of variables declaration//GEN-END:variables
    private Mat myImage;
    private byte[] buffer;
    private CustomImage img;
    private Mat brightImage;

}
